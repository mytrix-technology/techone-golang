Golang Basic Knowledge
First Knowledge in Go Programming Languange
14:00 21 Oct 2022
Tags: go, docs, knowledge

# Golang Basic Knowledge

Yudhistiro Tri Aronggo
Innovation Engineering Technical Lead, BTPN Syariah
yudhistiro.aronggo@btpnsyariah.com
https://github.com/mytrix-technology

Argan Megariansyah
Software Engineering Halmahera Squad
v-argan.mega@btpnsyariah.com
https://github.com/arganjava

* Logo
.image ../../image/golang-img.png
.background ../../image/content.png

* Section 1: What is GoLang
.background ../../image/content.png
Golang (atau biasa disebut dengan Go) adalah bahasa pemrograman yang dikembangkan di Google oleh Robert Griesemer, Rob Pike, dan Ken Thompson pada tahun 2007 dan mulai diperkenalkan ke publik tahun 2009.
Penciptaan bahasa Go didasari bahasa C dan C++, oleh karena itu gaya sintaksnya mirip.

## Use Case
*Use* *Case* *Application:*
- Real-time Applications Development
- Networking Development
- Cloud Infrastructure
- Microservices


* Pros - Cons
.background ../../image/content.png

    Pros:
    - Garbage Collection
    - Memory Safety
    - Automatic Declaration Of Variables
    - Structural Typing
    - CSP-Style Concurrency
    - Keep up with multi-threading
	Cons:
	- Time Consuming
	- Young Programming Language
	- Limited Automation Scope
	- Implicit Interfaces

* Use cases Application
.background ../../image/content.png
- Real-time Applications Development
- Networking Development
- Cloud Infrastructure
- Microservices

* Section 2: Array - Map - Slice
.background ../../image/content.png
- Array : kumpulan data bertipe sama, yang disimpan dalam sebuah variabel. Array memiliki kapasitas yang nilainya ditentukan pada saat pembuatan.
- Slice : reference elemen array. Slice bisa dibuat, atau bisa juga dihasilkan dari manipulasi sebuah array ataupun slice lainnya. Karena merupakan data reference, menjadikan perubahan data di tiap elemen slice akan berdampak pada slice lain yang memiliki alamat memori yang sama.
- Map : tipe data asosiatif yang ada di Go, berbentuk key-value pair. Untuk setiap data (atau value) yang disimpan, disiapkan juga key-nya. Key harus unik, karena digunakan sebagai penanda (atau identifier) untuk pengaksesan value yang bersangkutan.

* Play - Array
.background ../../image/content.png
.play ../../example/array-map-slice/array.go
* Play - Slice
.background ../../image/content.png
.play ../../example/array-map-slice/slice.go
* Play - Map
.background ../../image/content.png
.play ../../example/array-map-slice/map.go
* Play - Slice-Map
.background ../../image/content.png
.play ../../example/array-map-slice/slice-map.go

* Section 3: Pointer - Struct - Interface
.background ../../image/content.png
- Pointer
- Struct
- Interface

* Play - Pointer
.background ../../image/content.png
.play ../../example/func-pointer-struct-model/pointer.go

* Play - Struct
.background ../../image/content.png
.play ../../example/func-pointer-struct-model/struct.go

* Play - Interface
.background ../../image/content.png

* Section 4: Function
.background ../../image/content.png
Some Text

* Play - Function
.background ../../image/content.png
.play ../../example/func-pointer-struct-model/function.go

* Section 5: Context
.background ../../image/content.png
Context digunakan untuk mendefinisikan tipe context yang di dalamnya ada beberapa hal yaitu:

- Informasi Deadlines
- Signal Cancellation
- Data untuk keperluan komunikasi antar API atau antar proses

* Best Note Context
.background ../../image/content.png
- context.Background should be used only at the highest level, as the root of all derived contexts
- context.TODO should be used where not sure what to use or if the current function will be updated to use context in future
- context cancelations are advisory, the functions may take time to clean up and exit
- context.Value should be used very rarely, it should never be used to pass in optional parameters. This makes the API implicit and can introduce bugs. Instead, such values should be passed in as arguments.
- Donâ€™t store contexts in a struct, pass them explicitly in functions, preferably, as the first argument.
- Never pass nil context, instead, use a TODO if you are not sure what to use.
- The Context struct does not have a cancel method because only the function that derives the context should cancel it.

* Play - Context With Value
.background ../../image/content.png
.play ../../example/context/context-withvalue.go

* Play - Context With Timeout
.background ../../image/content.png
.play ../../example/context/context-withtimeout.go

* Play - Context With Deadline
.background ../../image/content.png
.play ../../example/context/context-withdeadline.go

* Play - Context With Cancel
.background ../../image/content.png
.play ../../example/context/context-withcancel.go

* Section 6: Goroutine
.background ../../image/content.png
- Goroutine adalah sebuah native thread yang menjalankan tugas secara asynchronous sangat ringat dan hanya membutuhkan sekitar 2kb memory
- Goroutine menjadi salah satu component terpenting dalam concurrency pemrograman karena multi core processor, semakin banyak core yang aktif maka akan semakin cepat dalam eksekusi program
- Goroutine Use case : Memanggil api secara async, handle request secara terpisah dan socket

* Play - Goroutine
.background ../../image/content.png
.play ../../example/goroutine/goroutine.go

* Section 7: Concurrency
.background ../../image/content.png
- Concurrency adalah sebuah program yang menjalankan proses secara bersamaan tanpa ada impak terhadap proses yang lain

## Code - Concurrency
.link ../../example/concurrency-pipeline/concurrency-pipeline.go Concurrency
.iframe ../../example/concurrency-pipeline/concurrency-pipeline.go

* Section 8: Generic
.background ../../image/content.png
- Generic programming adalah sebuah method yang memiliki parameter yang dinamis dimana tipe data yang dimasukan adalah tipe yang bersifat compatible dan biasanya Generic diperuntukan 1 code base for all
- Generic diperkenal kan oleh golang di versi 1.18
- DRY(Dont Repeat Yourself) method yang reusable

* Play - Generics
.background ../../image/content.png
.play ../../example/generics/generic.go

* Section 9: Benchmarks
.background ../../image/content.png
Some Text