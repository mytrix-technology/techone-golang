Golang Basic Knowledge
First Knowledge in Go Programming Languange
14:00 21 Oct 2022
Tags: go, docs, knowledge

Yudhistiro Tri Aronggo
Innovation Engineering Technical Lead, BTPN Syariah
yudhistiro.aronggo@btpnsyariah.com
https://github.com/mytrix-technology

Argan Megariansyah
Software Engineering Halmahera Squad
v-argan.mega@btpnsyariah.com
https://github.com/arganjava

* Logo
.image ../../image/golang-img.png

* Section 1: What is GoLang

Some Text

* Section 2: Array - Map - Slice

Some Text

* Display Partial code map
.code ../../example/map-slice/map.go /^//START/,/^//END/ HLMAP
* Play Run
.play ../../example/map-slice/map.go

* Display Partial code slice
.code ../../example/map-slice/slice.go /^//START/,/^//END/ HLSLICE
* Play Run
.play ../../example/map-slice/slice.go

* Display Partial code slice-map
.code ../../example/map-slice/slice-map.go /^//START/,/^//END/ HLSLICEMAP
* Play Run
.play ../../example/map-slice/slice-map.go

* Section 3: Pointer - Struct - Interface

Some Text

* Section 4: Function

Some Text

* Section 5: Context

- contextParent: terbuat dari context.Background(), dia tidak memiliki nilai, karena konsepnya hanya akan berjalan di background.
- ctx1: merupakan turunan pertama dari contextParent, di ctx1 di isi nilai hello world
- ctx4: merupakan turunan dari contextParent, merupakan sibling dari ctx1. ctx1 dan ctx4 tidak bisa saling mengakses nilai.
- ctx2 dan ctx5: merupakan turuan dari ctx1. Masing masing memiliki nilai tersendiri. Dan mereka dapat mengakses nilai dari parent mereka yakni ctx1
- ctx3: turunan paling kecil dari contextParent. Dia memiliki nilai tersendiri juga dan dia dapat mengakses nilai dari ctx1,dan ctx2. Namun tidak bisa mengakses nilai dari ctx5 ataupun ctx4.

* Best Note Context

- context.Background should be used only at the highest level, as the root of all derived contexts
- context.TODO should be used where not sure what to use or if the current function will be updated to use context in future
- context cancelations are advisory, the functions may take time to clean up and exit
- context.Value should be used very rarely, it should never be used to pass in optional parameters. This makes the API implicit and can introduce bugs. Instead, such values should be passed in as arguments.
- Don’t store contexts in a struct, pass them explicitly in functions, preferably, as the first argument.
- Never pass nil context, instead, use a TODO if you are not sure what to use.
- The Context struct does not have a cancel method because only the function that derives the context should cancel it.

* Context With Value
.play ../../example/context/context-withvalue.go

* Context With Timeout
.play ../../example/context/context-withtimeout.go

* Context With Deadline
.play ../../example/context/context-withdeadline.go

* Context With Cancel
.play ../../example/context/context-withcancel.go

* Section 5: Goroutine

Some Text

* Section 6: Concurrency

Some Text

* Example formatting

Formatting:
_italic_
*bold*
`program`
Markup—_especially_italic_text_—can easily be overused.
_Why_use_scoped__ptr_? Use plain ***ptr* instead.

Visit [[https://golang.org][the Go home page]].

* Testing

.background ../../image/golang-img.png
.iframe https://foo
.link https://foo label
.html ../../example/file.html
.caption _Gopher_ by [[https://github.com/mytrix-technology][Mytrix Technology]]