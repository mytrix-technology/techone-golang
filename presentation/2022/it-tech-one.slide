Golang Basic Knowledge
First Knowledge in Go Programming Languange
14:00 21 Oct 2022
Tags: go, docs, knowledge

# Golang Basic Knowledge

Yudhistiro Tri Aronggo
Innovation Engineering Technical Lead, BTPN Syariah
yudhistiro.aronggo@btpnsyariah.com
https://github.com/mytrix-technology

Argan Megariansyah
Software Engineering Halmahera Squad
v-argan.mega@btpnsyariah.com
https://github.com/arganjava

* Logo
.image ../../image/golang-img.png
.background ../../image/content.png

* Section 1: What is GoLang
.background ../../image/content.png
GoLang (atau biasa disebut dengan Go) adalah bahasa pemrograman yang diketik secara statis dan menghasilkan kode biner mesin yang dikompilasi serta unggul dalam hal kecepatan/efisiensi, keandalan, scalable dan kesederhanaan.
GoLang dikembangkan di Google oleh Robert Griesemer, Rob Pike, dan Ken Thompson pada tahun 2007 dan mulai diperkenalkan ke publik tahun 2009.
Penciptaan bahasa Go didasari bahasa C dan C++, oleh karena itu gaya sintaksnya mirip.

## Use Case
*Use* *Case* *Application:*
- Real-time Applications Development
- Networking Development
- Cloud Infrastructure
- Microservices

* Pros - Cons
.background ../../image/content.png

    Pros:
    - Memiliki garbage collector
    - Mendukung concurrency di level bahasa dengan pengaplikasian cukup mudah
    - Proses kompilasi sangat cepat dan Memory Safety
    - Deklarasi Variabel Otomatis
    - Pengetikan bergaya Structural
    - Concurrency dengan CSP-Style (Communicating Sequential Processes)
    - Mendukung Multi-Threading
    - Proses kompilasi sangat cepat
    - Mendukung pemrosesan data dengan banyak prosesor dalam waktu yang bersamaan (pararel processing)
	Cons:
	- Time Consuming dalam pemrograman
	- Bahasa Pemrograman yang terbilang baru
	- Lingkup Otomasi Terbatas
	- Implicit Interfaces

* Section 2: Array - Map - Slice
.background ../../image/content.png
- Array: kumpulan data bertipe sama, yang disimpan dalam sebuah variabel. Array memiliki kapasitas yang nilainya ditentukan pada saat pembuatan.
- Slice: reference elemen array. Slice bisa dibuat, atau bisa juga dihasilkan dari manipulasi sebuah array ataupun slice lainnya. Karena merupakan data reference, menjadikan perubahan data di tiap elemen slice akan berdampak pada slice lain yang memiliki alamat memori yang sama.
- Map: tipe data asosiatif yang ada di Go, berbentuk key-value pair. Untuk setiap data (atau value) yang disimpan, disiapkan juga key-nya. Key harus unik, karena digunakan sebagai penanda (atau identifier) untuk pengaksesan value yang bersangkutan.

* Play - Array
.background ../../image/content.png
.play ../../example/array-map-slice/array.go
* Play - Slice
.background ../../image/content.png
.play ../../example/array-map-slice/slice.go
* Play - Map
.background ../../image/content.png
.play ../../example/array-map-slice/map.go

* Section 3: Pointer - Struct - Interface
.background ../../image/content.png
- Pointer: reference atau alamat memori. Variabel pointer berarti variabel yang berisi alamat memori suatu nilai. Sebagai contoh sebuah variabel bertipe integer memiliki nilai 4, maka yang dimaksud pointer adalah alamat memori di mana nilai 4 disimpan, bukan nilai 4 itu sendiri.
- Struct: kumpulan definisi variabel (atau property) dan atau fungsi (atau method), yang dibungkus sebagai tipe data baru dengan nama tertentu. Property dalam struct, tipe datanya bisa bervariasi. Mirip seperti map, hanya saja key-nya sudah didefinisikan di awal, dan tipe data tiap itemnya bisa berbeda.
- Interface: kumpulan definisi method yang tidak memiliki isi (hanya definisi saja), yang dibungkus dengan nama tertentu.

* Play - Pointer
.background ../../image/content.png
.play ../../example/func-pointer-struct-model/pointer.go

* Play - Struct
.background ../../image/content.png
.play ../../example/func-pointer-struct-model/struct.go

* Play - Interface
.background ../../image/content.png
.play ../../example/interface-object-reflect/interface.go

* Section 4: Function
.background ../../image/content.png
Sekumpulan blok kode yang dibungkus dengan nama tertentu. Penerapan fungsi yang tepat akan menjadikan kode lebih modular dan juga dry (kependekan dari *don't* *repeat* *yourself*), tak perlu menuliskan banyak kode yang kegunaannya berkali-kali, cukup sekali saja lalu panggil sesuai kebutuhan.

* Play - Function
.background ../../image/content.png
.play ../../example/func-pointer-struct-model/function.go

* Section 5: Context
.background ../../image/content.png
Context digunakan untuk mendefinisikan tipe context yang di dalamnya ada beberapa hal yaitu:

- Informasi Deadlines
- Signal Cancellation
- Data untuk keperluan komunikasi antar API atau antar proses

*Jenis* *Context*:

    - context.TODO
    - context.Background
    - context.WithValue
    - context.WithCancel
    - context.WithTimeout
    - context.WithDeadline

* Best Note Context
.background ../../image/content.png
- context.Background harus digunakan hanya pada tingkat tertinggi, sebagai akar dari semua konteks turunan.
- context.TODO harus digunakan jika tidak yakin apa yang harus digunakan atau jika fungsi saat ini akan diperbarui untuk menggunakan konteks di masa mendatang.
- context.WithCancel adalah sebuah fungsi yang memerlukan waktu untuk membersihkan dan keluar.
- Jangan menyimpan konteks dalam struct, berikan secara eksplisit dalam fungsi, lebih disukai, sebagai argumen pertama.
- Jangan pernah melewati konteks nihil, sebagai gantinya, gunakan context.TODO jika Anda tidak yakin apa yang harus digunakan.
- Struktur Konteks tidak memiliki metode pembatalan karena hanya fungsi yang menurunkan konteks yang harus membatalkannya.

* Play - Context With Value
.background ../../image/content.png
.play ../../example/context/context-withvalue.go

* Play - Context With Timeout
.background ../../image/content.png
.play ../../example/context/context-withtimeout.go

* Play - Context With Deadline
.background ../../image/content.png
.play ../../example/context/context-withdeadline.go

* Section 6: Goroutine
.background ../../image/content.png
- Goroutine adalah sebuah native thread yang menjalankan tugas secara asynchronous sangat ringan dan hanya membutuhkan sekitar 2kb memory
- Goroutine menjadi salah satu komponen terpenting dalam concurrency pemrograman karena multi core processor, semakin banyak core yang aktif maka akan semakin cepat dalam eksekusi program
- Goroutine Use case : Memanggil api secara async, handle request secara terpisah dan socket

* Play - Goroutine
.background ../../image/content.png
.play ../../example/goroutine/goroutine.go

* Section 7: Concurrency
.background ../../image/content.png
- Concurrency adalah sebuah program yang menjalankan proses secara bersamaan tanpa ada dampak terhadap proses yang lain Atau Komposisi dari sebuah proses dan terstruktur dalam mengeksekusi proses secara bersamaan.

* Play - Concurrency
.background ../../image/content.png
.play ../../example/concurrency-pipeline/concurrency.go

* Section 8: Generic
.background ../../image/content.png
- Generic programming adalah metode yang memiliki parameter yang dinamis dimana tipe data yang dimasukan adalah tipe yang bersifat compatible dan biasanya Generic diperuntukan 1 code base for all Atau Metode penulisan kode dimana type data didefinisikan menggunakan type data pasti yang ditulis belakangan saat kode dieksekusi.
- Generic diperkenalkan oleh golang di versi 1.18
- DRY (*Dont* *Repeat* *Yourself*) method yang reusable

* Play - Generics
.background ../../image/content.png
.play ../../example/generics/generic.go

* Section 9: Benchmarks (CPU Performance)
.background ../../image/content.png
.image ../../image/golang-cpu-performance.png

* Benchmarks (Performance Runtime)
.background ../../image/content.png
.image ../../image/Performance-Golang-runtimes.png

* Reference
.background ../../image/content.png
.link https://gobyexample.com/ Go by Example
.link https://dasarpemrogramangolang.novalagung.com/ Dasar Pemrograman Go
.link https://www.practical-go-lessons.com/ Practical Go Lessons
.link https://tutorialedge.net/golang/getting-started-with-go/ Tutorial Edge
.link https://programming-language-benchmarks.vercel.app/go-vs-java Comparison
.link https://github.com/xnuter/perf-gauge/wiki/Maximum-rate Maximum Rate Comparison
.link https://levelup.gitconnected.com/go-worker-pool-the-concurrency-powerhouse-2dc7971f4f15 Go Worker Pool Concurrency